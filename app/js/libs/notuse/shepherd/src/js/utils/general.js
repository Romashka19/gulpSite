import { isString, isUndefined } from './type-check';
import objectAssignDeep from 'object-assign-deep';
import tippy from 'tippy.js';

const addHasTitleClass = (step) => {
  return { addHasTitleClass: _createClassModifier(`${step.classPrefix}shepherd-has-title`) };
};

function _getCenteredStylePopperModifier(styles) {
  return {
    computeStyle: {
      enabled: true,
      fn(data) {
        data.styles = Object.assign({}, data.styles, {
          left: '50%',
          top: '50%',
          transform: 'translate(-50%, -50%)'
        });

        return data;
      }
    },
    addShepherdClass: _createClassModifier(styles.shepherd.trim())
  };
}

/**
 * Used to compose settings for tippyOptions.popperOptions (https://atomiks.github.io/tippyjs/#popper-options-option)
 * @private
 */
function _getDefaultPopperOptions(styles) {
  return {
    positionFixed: true,
    modifiers: {
      addShepherdClass: _createClassModifier(styles.shepherd.trim())
    }
  };
}

/**
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing.
 * @param {Function} func The function to invoke
 * @param {Number} wait The time to wait in ms
 * @param {Boolean} immediate If true, the function will be invoked immediately
 * @return {Function}
 */
export function debounce(func, wait, immediate) {
  let timeout;
  return function() {
    const context = this;
    const args = arguments;
    const later = function() {
      timeout = null;
      if (!immediate) {
        func.apply(context, args);
      }
    };
    const callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) {
      func.apply(context, args);
    }
  };
}

/**
 * Ensure class prefix ends in `-`
 * @param {string} prefix The prefix to prepend to the class names generated by nano-css
 * @return {string} The prefix ending in `-`
 */
export function normalizePrefix(prefix) {
  if (!isString(prefix) || prefix === '') {
    return '';
  }

  return prefix.charAt(prefix.length - 1) !== '-' ? `${prefix}-` : prefix;
}

/**
 * Checks if options.attachTo.element is a string, and if so, tries to find the element
 * @param {Step} step The step instance
 * @returns {{element, on}}
 * `element` is a qualified HTML Element
 * `on` is a string position value
 */
export function parseAttachTo(step) {
  const options = step.options.attachTo || {};
  const returnOpts = Object.assign({}, options);

  if (isString(options.element)) {
    // Can't override the element in user opts reference because we can't
    // guarantee that the element will exist in the future.
    try {
      returnOpts.element = document.querySelector(options.element);
    } catch(e) {
      // TODO
    }
    if (!returnOpts.element) {
      console.error(`The element for this Shepherd step was not found ${options.element}`);
    }
  }

  return returnOpts;
}

/**
 * Determines options for the tooltip and initializes
 * `step.tooltip` as a Tippy.js instance.
 * @param {Step} step The step instance
 */
export function setupTooltip(step) {
  if (isUndefined(tippy)) {
    throw new Error('Using the attachment feature of Shepherd requires the Tippy.js library');
  }

  if (step.tooltip) {
    step.tooltip.destroy();
  }

  const attachToOpts = parseAttachTo(step);

  step.tooltip = _makeTippyInstance(attachToOpts, step);

  step.target = attachToOpts.element;
}

/**
 * Create a popper modifier for adding the passed className to the popper
 * @param {string} className The class to add to the popper
 * @return {{fn(*): *, enabled: boolean}|*}
 * @private
 */
function _createClassModifier(className) {
  return {
    enabled: true,
    fn(data) {
      data.instance.popper.classList.add(className);
      return data;
    }
  };
}

/**
 * Generates a `Tippy` instance from a set of base `attachTo` options
 * @param attachToOptions
 * @param {Step} step The step instance
 * @return {tippy|Instance | Instance[]} The final tippy instance
 * @private
 */
function _makeTippyInstance(attachToOptions, step) {
  if (!attachToOptions.element || !attachToOptions.on) {
    return _makeCenteredTippy(step);
  }

  const tippyOptions = _makeAttachedTippyOptions(attachToOptions, step);

  return tippy(attachToOptions.element, tippyOptions);
}

/**
 * Generates the hash of options that will be passed to `Tippy` instances
 * target an element in the DOM.
 *
 * @param {Object} attachToOptions The local `attachTo` options
 * @param {Step} step The step instance
 * @return {Object} The final tippy options  object
 * @private
 */
function _makeAttachedTippyOptions(attachToOptions, step) {
  const defaultPopperOptions = _getDefaultPopperOptions(step.styles);
  const tippyOptions = {
    content: step.el,
    flipOnUpdate: true,
    placement: attachToOptions.on || 'right',
    ...step.options.tippyOptions
  };

  if (step.options.title) {
    objectAssignDeep(defaultPopperOptions.modifiers, addHasTitleClass(step));
  }

  if (step.options.tippyOptions && step.options.tippyOptions.popperOptions) {
    objectAssignDeep(defaultPopperOptions, step.options.tippyOptions.popperOptions);
  }

  tippyOptions.popperOptions = defaultPopperOptions;

  return tippyOptions;
}

/**
 * Generates a `Tippy` instance for a tooltip that doesn't have a
 * target element in the DOM -- and thus is positioned in the center
 * of the view
 *
 * @param {Step} step The step instance
 * @return {tippy} The final tippy instance
 * @private
 */
function _makeCenteredTippy(step) {
  const centeredStylePopperModifier = _getCenteredStylePopperModifier(step.styles);
  const defaultPopperOptions = _getDefaultPopperOptions(step.styles);
  const tippyOptions = {
    content: step.el,
    placement: 'top',
    ...step.options.tippyOptions
  };

  tippyOptions.arrow = false;
  tippyOptions.popperOptions = tippyOptions.popperOptions || {};

  if (step.options.title) {
    objectAssignDeep(defaultPopperOptions.modifiers, addHasTitleClass(step));
  }

  objectAssignDeep(
    defaultPopperOptions.modifiers,
    centeredStylePopperModifier,
    tippyOptions.popperOptions.modifiers
  );

  const finalPopperOptions = objectAssignDeep(
    {},
    defaultPopperOptions,
    tippyOptions.popperOptions
  );

  tippyOptions.popperOptions = finalPopperOptions;

  return tippy(document.body, tippyOptions);
}
